#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
eth2transactions -- convert eth data format file to transactions format file

@author:     mikolajr

@copyright:  2017 ETHZ. All rights reserved.

@license:    GNU GPLv3

@contact:    mikolaj.rybinski@id.ethz.ch
'''

import sys
import os

from optparse import OptionParser

__all__ = []
__version__ = 0.1
__date__ = '2017-02-24'
__updated__ = '2017-02-24'

DEBUG = 1
PROFILE = 0

def elog(str):
    sys.stderr.write(str)
    sys.stderr.write('\n')



def binstr(str):
    assert(str in ('0', '1',))
    return str

def eth2transactions(infile, outfile, verbose=False):
    # read
    ll =[
        ( binstr(s) for s in line.split() ) for line in infile
    ]
    # transpose, filter and write
    for outline in zip(*ll):
        outfile.write(' '.join(
            str(i+1) for (i, b,) in enumerate( outline ) if b == '1'
        ))
        outfile.write('\n')



def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''Convert eth data format file to transactions format file'''
    program_license = "Copyright 2017 Mikolaj Rybinski (ETH Zurich)                                            \
                Licensed under the GNU General Public License v3.0\nhttps://www.gnu.org/licenses/gpl.html"

    if argv is None:
        argv = sys.argv[1:]

    infile = None
    outfile = None
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-i", "--in", dest="infile",
                          help="set input path [default: stdin]",
                          metavar="ETH_FILE")
        parser.add_option("-o", "--out", dest="outfile",
                          help="set output path [default: stdout]",
                          metavar="TRANSACTIONS_FILE")
        parser.add_option("-v", "--verbose", dest="verbose", action="store_true",
                          help="set verbosity [default: %default]",
                          default=bool(DEBUG))

        # process options
        (opts, args) = parser.parse_args(argv)

        infile = open(opts.infile, 'r') if infile else sys.stdin
        # will overwrite file if it already exists
        outfile = open(opts.outfile, 'w') if outfile else sys.stdout

        if DEBUG:
            elog("infile = %s" % infile.name)
            elog("outfile = %s" % outfile.name)
            elog("verbosity = %s" % str(opts.verbose))

        # MAIN BODY #
        eth2transactions(infile, outfile, verbose=opts.verbose)
        exit_code = 0

    except Exception, e:
        indent = len(program_name) * " "
        elog(program_name + ": " + repr(e))
        sys.stderr.write(indent + "  for help use --help\n")
        if DEBUG:
            import traceback
            traceback.print_exc(file=sys.stderr)
        exit_code = 2

    finally:
        if infile not in (None, sys.stdin):
            infile.close()
        if outfile not in (None, sys.stdout):
            outfile.close()

    return exit_code



if __name__ == "__main__":
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = '_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())
